/*
 * Copyright 2010 Softgress - http://www.softgress.com/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sim.data;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sim.agent.AgentHandler;

/**
 * Thread safe class used to collect all the events/measurements generated by
 * instrumented code and the system measurements generated by agent.
 * 
 * @author vroman
 * 
 */
public class Collector {
	
	private static final Logger logger = LoggerFactory.getLogger(AgentHandler.class);
	
	private static ConcurrentLinkedQueue<Metrics> measurements = new ConcurrentLinkedQueue<Metrics>();

	public static void addMeasurement(Metrics metrics) {
		measurements.add(metrics);
	}

	static {
		ServerComunicator ac = new ServerComunicator();
		ac.start();
	}

	private static class ServerComunicator extends Thread {
		private static final String agentLocation = "http://localhost:8099/server";
		private static final long COLLECT_INTERVAL = 5000;
		private static final int TIMEOUT = 5000;
		
		public ServerComunicator() {
			super("SIM - ServerComunicator");
			setDaemon(true);
		}

		@Override
		public void run() {
			while (true) {
				try {
					sleep(COLLECT_INTERVAL);
				} catch (InterruptedException e) {
					break;
				}
				while (!measurements.isEmpty()) {
					sendMeasurement();
				}
			}
		}

		private void sendMeasurement() {
			try {
				URL agentURL = new URL(agentLocation);
				URLConnection serverConnection = agentURL.openConnection();
				serverConnection.setConnectTimeout(TIMEOUT);
				serverConnection.setReadTimeout(TIMEOUT);
				serverConnection.setDoInput(true);
				serverConnection.setDoOutput(true);
				serverConnection.setUseCaches(false);
				ObjectOutputStream serverDataStream = new ObjectOutputStream(serverConnection.getOutputStream());
				while (!measurements.isEmpty()) {
					Metrics measurement = measurements.remove();
					serverDataStream.writeObject(measurement);
				}
				serverDataStream.flush();
				serverDataStream.close();
				BufferedReader agentResponseStream = new BufferedReader(new InputStreamReader(
						serverConnection.getInputStream()));
				String agentResponse = agentResponseStream.readLine();
				agentResponseStream.close();
				if (!"SUCCESS".equalsIgnoreCase(agentResponse)) {
					logger.error("SIM - server communication failure: " + agentResponse);
				}
			} catch (IOException e) {
				logger.error("SIM - server communication failure: " + e.getMessage());
				//FIXME no idea if correct, I am clearing the measurements list to avoid infinite loop (if server is down then no measurement is removed from queue)
				measurements.clear();
			}
		}
	}
}
